Lógica de programação
- variáveis
- operadores
- algorítmo
- estruturas de controle
- POO
- estruturas de dados

___________________________________
MANDAMENTOS DA programação
1)UX (User eXperience) - desenvolver sempre pensando na experiencia do usuário.

Dica de vídeo: 

2) usar o mí
nimo possível de código (variáveis, operadores, comparadores, estrutura de controles etc) para resolver o problema. (lembrar do marca passo) 
3) Entender o problema. Não adianta sentar na frente do PC se você não sabe como resolver um problema.
"Algoritmo" ("receita do bolo")

conceito:
           variáveis
entrada - processamento - saída
git 
GIT e GITHUB
Comandos básicos do git:
git config --global user.name "Seu nome"
git config --global user.email "seuemail@email.com"
git clone url_do_repositório (clonar um repositório)
git status (verificar o status do repositório local)
git add . (adiciona ao repositório local)
git commit -m "tutorial" (documentar as alterações)
git push (enviar ao repositório GitHub)
git pull (sincroniza as informações do repositório no PC)

Gerar token GitHub
1) Settings
2) Developer Settings
3) Token classic
4) Gerar o token selecionando tudo, guardar o token

____________________________________________________
Boas práticas na programação
1) Cabeçalho de documentação
/**
    Nome do projeto
    Descrição da classe / função
    @author Professor José de Assis
    @version 1.0
*/

2) Nomes de arquivos, variáveis, funções, classes, etc
Regras (clean code)
- Declarar nomes que tenham relação com o problema
- Não usar espaço, "ç", acentos e caracteres especiais para declaração de nomes (erros internos no programa)
- Só classes iniciam com letra maiúscula
- Não iniciar um nome com número
- Quando for declarar dois nomes usar a técnica do camelo (camel case) - Usar uma letra maiúscula na segunda palavra
Exemplo
nomecliente -> nomeCliente


____________________________________________________
Comandos básicos do MS-DOS
cls -> limpar a tela
dir -> listar arquivos e diretórios
cd "nome_diretório" -> entrar no diretório // Exemplo "cd Fundamentos"
cd .. -> voltar par ao diretório anterior
ctrl +c : voltar

____________________________________________________
Node - Plataforma que permite a execução do JavaScript
fora do navegador (browser)
https://nodejs.org/  (baixar sempre a versão LTS)

Comandos básicos:
node -v (versão do node)

Gerenciador de pacote para o node:
npm está relacionado a pasta do projeto ou seja os pacotes são instalados na raiz do projeto e não no sistema operacional

npm -v (versão do npm)
npm ls (listar pacotes instalados)

npm init (iniciar um novo projeto JavaScript)
   |____ package.json

npm i nome_do_pacote (intalar um novo pacote)
npm r nome_do_pacote (remover um novo pacote)

json (JavaScript Object Notation)

____________________________________________________
Variáveis e constante:

Uma variável é um espaço na memória do computador onde armazenamos dados que podem ser utilizados e modificados durante a execução de um programa. O nome "variável" vem do fato de que o valor armazenado pode variar ao longo do tempo, conforme o programa roda.

Por que usar variáveis?
Para guardar informações que você vai precisar mais tarde.
Para realizar cálculos ou tomar decisões baseadas em diferentes valores.


Uma constante é como uma variável, mas com uma diferença importante: uma vez que você define o valor de uma constante, ele não pode ser alterado durante a execução do programa.

Por que usar constantes?
Segurança: Se você sabe que um valor não deve ser alterado em seu programa, usar uma constante evita erros.
Legibilidade: Quando você usa uma constante, deixa claro para quem está lendo o código que aquele valor é fixo e importante.
Boas práticas: Em muitos casos, é recomendado usar constantes sempre que possível para valores que não precisam mudar, facilitando a manutenção do código.


Nas linguagens de programação as variáveis são tipadas ou dinamicamente tipadas

Existem 3 tipos de variáveis:

String -> Armazena caracteres e números
Number -> Armazena números inteiros e não inteiros
Boolean -> true | false


_____________________________________________________
Comandos JavaScript (Sintaxe)
console.log() -> escrever no console
console.clear() -> Limpar a tela do console
const -> criar(declarar) uma constante
let -> criar(declarar) uma variável
typeof() -> verificar o tipo de variável